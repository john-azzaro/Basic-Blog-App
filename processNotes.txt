Basic Blog App Process notes
============================




Objective
=========
In this study, we'll make a basic blog application with CRUD operations (Create, Read, Update, and Delete) 
functionality and implement mongoose so that we can store our information to a MongoDB database. I'm going
to go step-by-step through the process to both guide learners and document the process for myself in an 
effort to improve workflow.





Process Workflow Summary
========================

Phase 1: Project Setup
Phase 2: Create (and Test) your server
Phase 3: Setup your database connection 





Phase 1: Project Setup
=========================================================================================
-- This phase is comprised of basic setup, installation of dependencies, development 
   environment setup, and essential files like server.js, .gitignore, and .env.
=========================================================================================

    // Project Setup:                           
        1. Basic-Blog-App                                      -- Create a folder to store you application.
        2. npm init                                            -- Create a package.json file to start the project off (you can use npm inti -y to skip the questions).

    // Install express:
        3. npm install express                                 -- Install express (note: you can also type "npm i" to install).

    // Add .gitignore file for node_modules:        
        4. .gitignore > node_modules                           -- Add .gitignore file to ignore node_modules folder that was just added when you installed express.

    // Install application dependencies:
        5. npm install <dependencies>                          -- Install any other dependencies (if you need to at the outset of the project like mongoose).
        6. npm install --save-dev dotenv nodemon               -- Install development enviroment.

    // Create custom "devStart" script in package.json:     
        7. "devStart": "nodemon server.js"                     -- Running this command makes starting your server a little more streamlined.
        
    // Create initial application files:       
        8.1.   server.js                                       -- Creates a .js file for server code.
        8.2.   .env                                            -- Creates a file used by the dotenv package to define environment variables persistently.
         
        -------------------------------------------------------------------------------------------------------------------------------------------
        Notes: 
            * Dont breeze through the npm init stage, take the time to setup the project correctly (i.e. server.js instead of index.js, etc.)
            * Submit everything AFTER you create the .gitignore file and add node_modules.
            * Install a developer enviroment as good practice, it makes things a lot easier in development even if you end up not using it.    
            * You can have multiple custom scripts.    
        -------------------------------------------------------------------------------------------------------------------------------------------





Phase 2: Create (and Test) your server:
=============================================================================================================
-- This phase creates the basic express server and suggested testing stategy to ensure everything is working.
=============================================================================================================

    1.  Load express and instantiate the express application:
        ---------------------------------------------------------
        const express = require('express');
        const app = express();
        ---------------------------------------------------------

    2. Create a (temporary) basic server to test the connection:
        ----------------------------------------------------------
        app.listen(3000, function() {
            console.log('Your app is listening on port 3000');
        });
        ----------------------------------------------------------

    3. Test your connection
        * In gitbash, you will can run the server by running the custom script "devStart" with "npm run devStart".
        * If successful, you will see something like this:

            -----------------------------------------------------------------------
                $ npm run devStart

                > basic-blog-app@1.0.0 devStart C:\Users\Admin\Basic-Blog-App
                > nodemon server.js

                [nodemon] 1.19.4
                [nodemon] to restart at any time, enter `rs`
                [nodemon] watching dir(s): *.*
                [nodemon] watching extensions: js,mjs,json
                [nodemon] starting `node server.js`
                Your app is listening on port 3000
            -----------------------------------------------------------------------

        * And when you go to "localhost:3000", you should see "Cannot GET /", which means that the server is working,
          but no routes are present yet! 

        -----------------------------------------------------------------------------------------------------------------------------------------------
        Notes:
            * It might seem like extra work to create an app.listen function that you will need to heavily modify, if not entirely remove because
              of the intricacies of creating a mongoose server, but experience has shown that you always want to double check your work to make sure
              you have a good point to reference back to where everything was functioning the way it is supposed to.            
        -----------------------------------------------------------------------------------------------------------------------------------------------





Phase 3: Setup your database connection:
=======================================================================================================
-- This phase is all about setting up mongoose, a framework that provides a modeling enviroment for
   data, enforces structure, and manages relationships between data, providing schema validation, etc.
=======================================================================================================








    2. Add mongoose (since we will interact with a database):
        ---------------------------------------------------------
        const mongoose = require('mongoose');
        ---------------------------------------------------------
        




REST api study








